-- DROP TABLES --
DROP TABLE VEHICLE CASCADE CONSTRAINTS PURGE;
DROP TABLE SHIP CASCADE CONSTRAINTS PURGE;
DROP TABLE LOCATION CASCADE CONSTRAINTS PURGE;
DROP TABLE CONTAINER CASCADE CONSTRAINTS PURGE;
DROP TABLE CONTINENT CASCADE CONSTRAINTS PURGE;
DROP TABLE COUNTRY CASCADE CONSTRAINTS PURGE;
DROP TABLE TRUCK CASCADE CONSTRAINTS PURGE;
DROP TABLE CARGO_MANIFEST CASCADE CONSTRAINTS PURGE;
DROP TABLE SHIP_CONTAINER CASCADE CONSTRAINTS PURGE;
DROP TABLE POSITION CASCADE CONSTRAINTS PURGE;
DROP TABLE POSITIONAL_MESSAGES CASCADE CONSTRAINTS PURGE;
DROP TABLE STAFF CASCADE CONSTRAINTS PURGE;
DROP TABLE USERR CASCADE CONSTRAINTS PURGE;
DROP TABLE CONTAINER_CARGO_MANIFEST CASCADE CONSTRAINTS PURGE;
DROP TABLE ROLE CASCADE CONSTRAINTS PURGE;
DROP TABLE TRIP CASCADE CONSTRAINTS PURGE;
DROP TABLE STAFF_SHIP CASCADE CONSTRAINTS PURGE;
DROP TABLE CLIENT CASCADE CONSTRAINTS PURGE;
DROP TABLE CLIENT_CONTAINER CASCADE CONSTRAINTS PURGE;
DROP TABLE STOPS CASCADE CONSTRAINTS PURGE;
DROP TABLE BORDERS CASCADE CONSTRAINTS PURGE;
DROP TABLE SEADISTS CASCADE CONSTRAINTS PURGE;
DROP TABLE REFRIG CASCADE CONSTRAINTS PURGE;
DROP TABLE AUDIT_TRAIL CASCADE CONSTRAINTS PURGE;

-- CREATE TABLES --
CREATE TABLE VEHICLE(
    VEHICLE_ID VARCHAR(10) CONSTRAINT pk_VEHICLE_ID_VEHICLE PRIMARY KEY
);

CREATE TABLE SHIP(
    MMSI NUMBER(9) CONSTRAINT pk_MMSI_SHIP PRIMARY KEY,
    IMO CHAR(10) UNIQUE,
    CALLSIGN VARCHAR(255) UNIQUE,
    VESSEL_TYPE INTEGER,
    NAME VARCHAR(50) CONSTRAINT nn_NAME_SHIP NOT NULL,
    CAPACITY INTEGER,
    DRAFT DECIMAL(5,2),
    WIDTH INTEGER,
    LENGTH INTEGER,
    NUM_GENERATORS INTEGER,
    VEHICLE_ID VARCHAR(10),
    FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID)
);

CREATE TABLE CONTINENT(
    CONTINENT CHAR(50) CONSTRAINT pk_CONTINENT_CONTINENT PRIMARY KEY
);

CREATE TABLE POSITION(
    POSITION_ID INTEGER CONSTRAINT pk_POSITION_ID_POSITION PRIMARY KEY,
    LATITUDE DECIMAL(4,2) DEFAULT 91.00,
    LONGITUDE DECIMAL(5,2) DEFAULT 181.00,
    CONSTRAINT ck_POSTITION CHECK ( LATITUDE >= -90.00 AND LATITUDE <= 90.00 AND LONGITUDE >= -180.00 AND LONGITUDE <= 180.00)
);

CREATE TABLE COUNTRY(
    CONTINENT CHAR(50),
    ALPHA2CODE CHAR(10) UNIQUE,
    ALPHA3CODE CHAR(10) UNIQUE,
    COUNTRY CHAR(50) CONSTRAINT pk_COUNTRY_COUNTRY PRIMARY KEY,
    POPULATION DECIMAL(5,2),
    CAPITAL CHAR(50),
    LAT DECIMAL(4,2),
    LON DECIMAL(5,2),
    FOREIGN KEY (CONTINENT) REFERENCES CONTINENT (CONTINENT),
    CONSTRAINT ck_COUNTRY CHECK ( LAT >= -90.00 AND LAT <= 90.00 AND LON >= -180.00 AND LON <= 180.00)
);

CREATE TABLE TRIP(
    TRIP_ID INTEGER CONSTRAINT pk_TRIP_ID_TRIP PRIMARY KEY,
    VEHICLE_ID VARCHAR(10),
    DEPARTURE CHAR(25),
    ARRIVAL CHAR(25),
    DEPARTURE_DATE DATE,
    ARRIVAL_DATE DATE,

    FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID)
);

CREATE TABLE STOPS(
    STOPS_NAME CHAR(25) CONSTRAINT pk_STOPS_NAME_STOPS PRIMARY KEY,
    TRIP_ID INTEGER,
    FOREIGN KEY (TRIP_ID) REFERENCES TRIP (TRIP_ID)
);

CREATE TABLE CARGO_MANIFEST(
    CARGO_MANIFEST_ID INTEGER CONSTRAINT pk_CARGO_MANIFEST_ID_CARGO_MANIFEST PRIMARY KEY,
    GROSS_WEIGHT INTEGER,
    MANIFEST_DATE DATE,
    TYPE CHAR(25),
    STOPS_NAME CHAR(25),
    VEHICLE_ID VARCHAR(10),
    FOREIGN KEY (STOPS_NAME) REFERENCES STOPS (STOPS_NAME),
    FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID)
);

CREATE TABLE LOCATION(
    LOCATION_ID VARCHAR(25) CONSTRAINT pk_LOCATION_ID_LOCATION PRIMARY KEY,
    NAME VARCHAR(50) CONSTRAINT nn_NAME_LOCATION NOT NULL,
    POSITION_ID INTEGER,
    COUNTRY CHAR(50),
    TYPE CHAR(50),
    TRIP_ID INTEGER,
    CAPACITY INTEGER,
    FOREIGN KEY (POSITION_ID) REFERENCES POSITION (POSITION_ID),
    FOREIGN KEY (COUNTRY) REFERENCES COUNTRY (COUNTRY),
    FOREIGN KEY (TRIP_ID) REFERENCES TRIP (TRIP_ID)
);

CREATE TABLE TRUCK(
    TRUCK_ID INTEGER CONSTRAINT pk_TRUCK_ID_TRUCK PRIMARY KEY,
    LICENSE_PLATE INTEGER,
    NAME VARCHAR(50) CONSTRAINT nn_NAME_TRUCK NOT NULL,
    VEHICLE_ID VARCHAR(10),
    FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID)
);

CREATE TABLE ROLE(
    ROLE_TYPE CHAR(50) CONSTRAINT pk_ROLE_TYPE_ROLE PRIMARY KEY
);

CREATE TABLE STAFF(
    STAFF_ID INTEGER CONSTRAINT pk_STAFF_ID_STAFF PRIMARY KEY,
    NAME CHAR(50) CONSTRAINT nn_NAME_STAFF NOT NULL,
    CARGO_MANIFEST_ID INTEGER,
    LOCATION_ID VARCHAR(25),
    FOREIGN KEY (CARGO_MANIFEST_ID) REFERENCES CARGO_MANIFEST (CARGO_MANIFEST_ID),
    FOREIGN KEY (LOCATION_ID) REFERENCES LOCATION (LOCATION_ID)
);

CREATE TABLE CLIENT(
    CLIENT_ID INTEGER CONSTRAINT pk_CLIENT_ID_CLIENT PRIMARY KEY,
    NAME CHAR(50) CONSTRAINT nn_NAME_CLIENT NOT NULL
); 

CREATE TABLE USERR(
    USERNAME VARCHAR(25) CONSTRAINT pk_USERNAME_USER PRIMARY KEY,
    PASSWORD VARCHAR(50),
    ROLE_TYPE CHAR(50),
    STAFF_ID INTEGER,
    CLIENT_ID INTEGER,
    FOREIGN KEY (ROLE_TYPE) REFERENCES ROLE (ROLE_TYPE),
    FOREIGN KEY(STAFF_ID) REFERENCES STAFF (STAFF_ID),
    FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (CLIENT_ID)
);

CREATE TABLE CONTAINER(
    CONTAINER_ID INTEGER CONSTRAINT pk_CONTAINER_ID_CONTAINER PRIMARY KEY,
    PAYLOAD DECIMAL(5,2),
    TARE DECIMAL(5,2),
    GROSS DECIMAL(5,2),
    TYPE CHAR(25),
    ISO_CODE VARCHAR(25)
);

CREATE TABLE CLIENT_CONTAINER(
    CLIENT_ID INTEGER,
    CONTAINER_ID INTEGER,
    CARGO_MANIFEST_ID INTEGER,
    FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT (CLIENT_ID),
    FOREIGN KEY (CONTAINER_ID) REFERENCES CONTAINER (CONTAINER_ID),
    FOREIGN KEY (CARGO_MANIFEST_ID) REFERENCES CARGO_MANIFEST (CARGO_MANIFEST_ID),
    CONSTRAINT pk_CLIENT_CONTAINER
    PRIMARY KEY(CLIENT_ID,CONTAINER_ID,CARGO_MANIFEST_ID)
);

CREATE TABLE CONTAINER_CARGO_MANIFEST(
    CONTAINER_ID INTEGER,
    CARGO_MANIFEST_ID INTEGER,
    X INTEGER,
    Y INTEGER,
    Z INTEGER,
    UNLOADING_LOCATION VARCHAR(25),
    FOREIGN KEY (CONTAINER_ID) REFERENCES CONTAINER (CONTAINER_ID),
    FOREIGN KEY (CARGO_MANIFEST_ID) REFERENCES CARGO_MANIFEST (CARGO_MANIFEST_ID),
    CONSTRAINT pk_CONTAINER_CARGO_MANIFEST
    PRIMARY KEY(CONTAINER_ID,CARGO_MANIFEST_ID)
);

CREATE TABLE SHIP_CONTAINER(
    CONTAINER_ID INTEGER CONSTRAINT pk_CONTAINER_ID_SHIP_CONTAINER PRIMARY KEY,
    MMSI NUMBER(9),
    FOREIGN KEY (CONTAINER_ID) REFERENCES CONTAINER (CONTAINER_ID),
    FOREIGN KEY (MMSI) REFERENCES SHIP (MMSI)
);

CREATE TABLE POSITIONAL_MESSAGES(
    BASEDATETIME DATE CONSTRAINT pk_BASEDATETIME_POSITIONAL_MESSAGES PRIMARY KEY,
    SOG DECIMAL(5,2),
    COG DECIMAL(5,2),
    HEADING INTEGER DEFAULT 511,
    TRANSCIEVER_CLASS CHAR(1),
    MMSI NUMBER(9), 
    POSITION_ID INTEGER,
    FOREIGN KEY (MMSI) REFERENCES SHIP (MMSI),
    FOREIGN KEY (POSITION_ID) REFERENCES POSITION (POSITION_ID),
    CONSTRAINT ck_POSITIONAL_MESSAGES CHECK ( HEADING >= 0 AND HEADING <= 359 AND COG >= 0 AND COG <= 359)
);

CREATE TABLE STAFF_SHIP(
    MMSI NUMBER(9),
    STAFF_ID INTEGER,
    FOREIGN KEY (MMSI) REFERENCES SHIP (MMSI),
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF (STAFF_ID),
    CONSTRAINT pk_STAFF_SHIP
    PRIMARY KEY(MMSI,STAFF_ID)
);

CREATE TABLE SEADISTS(
    COUNTRYORIGIN CHAR(50),
    PORTIDORIGIN INTEGER,
    PORTORIGIN CHAR(50),
    COUNTRYDESTINY CHAR(50),
    PORTIDDESTINY INTEGER,
    PORTDESTINY CHAR(50),
    SEADISTS INTEGER
);

CREATE TABLE BORDERS(
    COUNTRYORIGIN CHAR(50),
    COUNTRYDESTINY CHAR(50) 
); 

CREATE TABLE REFRIG(
    CONTAINER_ID INTEGER CONSTRAINT pk_CONTAINER_ID_REFRIG PRIMARY KEY,
    TEMPERATURE INTEGER,
    FOREIGN KEY (CONTAINER_ID) REFERENCES CONTAINER (CONTAINER_ID)
);

CREATE TABLE AUDIT_TRAIL(
    CONTAINER_ID INTEGER,
    CARGO_MANIFEST_ID INTEGER,
    USERNAME VARCHAR(25),
    TYPE_OPERATION CHAR(25),
    DATE_TIME_OPERATION TIMESTAMP,
    FOREIGN KEY (USERNAME) REFERENCES USERR (USERNAME),
    FOREIGN KEY (CONTAINER_ID) REFERENCES CONTAINER (CONTAINER_ID),
    FOREIGN KEY (CARGO_MANIFEST_ID) REFERENCES CARGO_MANIFEST (CARGO_MANIFEST_ID),
    CONSTRAINT pk_AUDIT_TRAIL
    PRIMARY KEY (USERNAME)
);


--INSERTS


--CONSTRAINT-PRIMARY KEY
INSERT INTO SHIP (MMSI, IMO, CALLSIGN, VESSEL_TYPE, NAME, CAPACITY, DRAFT, WIDTH, LENGTH ,NUM_GENERATORS )
VALUES ('123456789', 'DRRTY', '12345', '1', 'SHIP', '20', '1,20', '50', '30', '2');

INSERT INTO SHIP (MMSI, IMO, CALLSIGN, VESSEL_TYPE, NAME, CAPACITY, DRAFT, WIDTH, LENGTH ,NUM_GENERATORS )
VALUES ('123456789', 'OPLIU', '23456', '1', 'SHIP', '20', '1,20', '50', '30', '2');

--CONSTRAINT-UNIQUE

INSERT INTO SHIP (MMSI, IMO, CALLSIGN, VESSEL_TYPE, NAME, CAPACITY, DRAFT, WIDTH, LENGTH ,NUM_GENERATORS )
VALUES ('345678912', 'TYGU', '63748', '1', 'SHIP', '20', '1,20', '50', '30', '2');

INSERT INTO SHIP (MMSI, IMO, CALLSIGN, VESSEL_TYPE, NAME, CAPACITY, DRAFT, WIDTH, LENGTH ,NUM_GENERATORS )
VALUES ('456789123', 'MNOKL', '63748', '1', 'SHIP', '20', '1,20', '50', '30', '2');

--CONSTRAINT-NOT NULL
INSERT INTO STAFF (STAFF_ID, NAME, CARGO_CONTAINER_ID, LOCATION_ID)
VALUES ('12345', '', '12345', 'PORTLEIXOES');
INSERT INTO CARGO_MANIFEST(CARGO_MANIFEST_ID, GROSS_WEIGHT,MANIFEST_DATE, TYPE, MMSI, STOPS_NAME )
VALUES('345502', '5','2020-01-01', 'Offloaded','', 'CASCAIS' );

--CONSTRAINT-CHECK
INSERT INTO POSITIONAL_MESSAGES (BASEDATETIME, SOG, COG, HEADING, TRANSCIEVER_CLASS, MMSI, POSITION_ID)
VALUES ('2021-01-01', '12,3', '23,4', '360', 'A', '123456789', '123');



/* O modelo de dados relacional ? um tipo de base de dados que armazena e fornece acesso a pontos de dados relacionados entre si. 
Base de dados relacionais s?o baseados no modelo relacional, uma maneira intuitiva e direta de representar dados em tabelas.
Por essa mesma raz?o achamos ser o modelo apropriado ao desenvolvimento deste projeto.*/

